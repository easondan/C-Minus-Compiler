
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import absyn.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\031\003\000\002\002\004\000\002\031" +
    "\002\000\002\032\004\000\002\032\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\006\005\000" +
    "\002\006\010\000\002\006\005\000\002\006\010\000\002" +
    "\006\010\000\002\006\010\000\002\006\005\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\004\010" +
    "\000\002\004\010\000\002\004\010\000\002\004\010\000" +
    "\002\004\010\000\002\005\010\000\002\005\010\000\002" +
    "\005\010\000\002\005\010\000\002\005\010\000\002\005" +
    "\006\000\002\033\003\000\002\033\003\000\002\034\005" +
    "\000\002\034\003\000\002\007\004\000\002\007\006\000" +
    "\002\021\006\000\002\035\004\000\002\035\002\000\002" +
    "\036\004\000\002\036\002\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\015\004\000\002\015\003\000\002\010\007\000" +
    "\002\010\011\000\002\010\007\000\002\010\006\000\002" +
    "\010\005\000\002\010\007\000\002\010\007\000\002\010" +
    "\006\000\002\010\011\000\002\010\011\000\002\016\007" +
    "\000\002\016\007\000\002\016\007\000\002\016\007\000" +
    "\002\016\006\000\002\016\006\000\002\016\005\000\002" +
    "\017\005\000\002\017\004\000\002\017\005\000\002\017" +
    "\004\000\002\014\005\000\002\014\003\000\002\030\003" +
    "\000\002\030\006\000\002\030\006\000\002\011\005\000" +
    "\002\011\003\000\002\012\005\000\002\012\003\000\002" +
    "\013\004\000\002\013\003\000\002\027\005\000\002\027" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\026\005\000\002\026\003\000\002\041\003\000\002" +
    "\041\003\000\002\025\005\000\002\025\003\000\002\042" +
    "\003\000\002\042\003\000\002\024\004\000\002\024\003" +
    "\000\002\023\005\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\022\006\000\002" +
    "\022\006\000\002\022\006\000\002\037\003\000\002\037" +
    "\002\000\002\040\005\000\002\040\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\014\002\uffff\003\015\004\006\007\005\011" +
    "\011\001\002\000\014\002\001\003\015\004\006\007\005" +
    "\011\011\001\002\000\006\003\ufff1\041\ufff1\001\002\000" +
    "\006\003\ufff2\041\ufff2\001\002\000\014\002\ufffd\003\ufffd" +
    "\004\ufffd\007\ufffd\011\ufffd\001\002\000\014\002\ufffb\003" +
    "\ufffb\004\ufffb\007\ufffb\011\ufffb\001\002\000\006\003\ufff0" +
    "\041\ufff0\001\002\000\014\002\ufffc\003\ufffc\004\ufffc\007" +
    "\ufffc\011\ufffc\001\002\000\004\002\302\001\002\000\006" +
    "\003\042\041\257\001\002\000\004\041\017\001\002\000" +
    "\014\002\ufffa\003\ufffa\004\ufffa\007\ufffa\011\ufffa\001\002" +
    "\000\004\033\020\001\002\000\010\004\006\007\005\011" +
    "\024\001\002\000\010\003\uffe4\032\255\034\uffe4\001\002" +
    "\000\010\003\uffe1\032\uffe1\034\uffe1\001\002\000\004\034" +
    "\031\001\002\000\010\003\uffe3\034\uffe3\041\ufff0\001\002" +
    "\000\004\041\026\001\002\000\012\003\uffe0\032\uffe0\034" +
    "\uffe0\035\027\001\002\000\004\036\030\001\002\000\010" +
    "\003\uffdf\032\uffdf\034\uffdf\001\002\000\006\031\034\037" +
    "\033\001\002\000\014\002\uffee\003\uffee\004\uffee\007\uffee" +
    "\011\uffee\001\002\000\042\003\uffdc\004\uffdc\006\uffdc\007" +
    "\uffdc\010\uffdc\011\uffdc\012\uffdc\014\uffdc\025\uffdc\031\uffdc" +
    "\033\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\001" +
    "\002\000\014\002\uffe9\003\uffe9\004\uffe9\007\uffe9\011\uffe9" +
    "\001\002\000\042\003\uffda\004\006\006\uffda\007\005\010" +
    "\uffda\011\011\012\uffda\014\uffda\025\uffda\031\uffda\033\uffda" +
    "\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\001\002\000" +
    "\042\003\uffdd\004\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd" +
    "\012\uffdd\014\uffdd\025\uffdd\031\uffdd\033\uffdd\037\uffdd\040" +
    "\uffdd\041\uffdd\042\uffdd\043\uffdd\001\002\000\034\003\110" +
    "\006\071\010\070\012\067\014\107\025\075\031\066\033" +
    "\100\037\033\040\111\041\073\042\076\043\065\001\002" +
    "\000\006\003\042\041\041\001\002\000\010\003\050\031" +
    "\052\035\051\001\002\000\006\031\044\035\043\001\002" +
    "\000\004\042\045\001\002\000\044\002\ufff7\003\ufff7\004" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\014\ufff7" +
    "\025\ufff7\031\ufff7\033\ufff7\037\ufff7\040\ufff7\041\ufff7\042" +
    "\ufff7\043\ufff7\001\002\000\004\036\046\001\002\000\004" +
    "\031\047\001\002\000\044\002\ufff6\003\ufff6\004\ufff6\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\014\ufff6\025\ufff6" +
    "\031\ufff6\033\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6\043" +
    "\ufff6\001\002\000\042\003\ufff3\004\ufff3\006\ufff3\007\ufff3" +
    "\010\ufff3\011\ufff3\012\ufff3\014\ufff3\025\ufff3\031\ufff3\033" +
    "\ufff3\037\ufff3\040\ufff3\041\ufff3\042\061\043\ufff3\001\002" +
    "\000\006\003\054\042\053\001\002\000\044\002\ufff9\003" +
    "\ufff9\004\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9" +
    "\014\ufff9\025\ufff9\031\ufff9\033\ufff9\037\ufff9\040\ufff9\041" +
    "\ufff9\042\ufff9\043\ufff9\001\002\000\004\036\057\001\002" +
    "\000\004\036\055\001\002\000\004\031\056\001\002\000" +
    "\044\002\ufff4\003\ufff4\004\ufff4\006\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\014\ufff4\025\ufff4\031\ufff4\033\ufff4\037" +
    "\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4\001\002\000\004" +
    "\031\060\001\002\000\044\002\ufff8\003\ufff8\004\ufff8\006" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\014\ufff8\025\ufff8" +
    "\031\ufff8\033\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043" +
    "\ufff8\001\002\000\004\036\062\001\002\000\004\031\063" +
    "\001\002\000\044\002\ufff5\003\ufff5\004\ufff5\006\ufff5\007" +
    "\ufff5\010\ufff5\011\ufff5\012\ufff5\014\ufff5\025\ufff5\031\ufff5" +
    "\033\ufff5\037\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5\001" +
    "\002\000\036\003\uffd8\005\uffd8\006\uffd8\010\uffd8\012\uffd8" +
    "\014\uffd8\025\uffd8\031\uffd8\033\uffd8\037\uffd8\040\uffd8\041" +
    "\uffd8\042\uffd8\043\uffd8\001\002\000\044\003\uff9c\013\uff9c" +
    "\014\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021\uff9c\022" +
    "\uff9c\023\uff9c\024\uff9c\026\uff9c\027\uff9c\031\uff9c\032\uff9c" +
    "\034\uff9c\036\uff9c\001\002\000\036\003\uffd3\005\uffd3\006" +
    "\uffd3\010\uffd3\012\uffd3\014\uffd3\025\uffd3\031\uffd3\033\uffd3" +
    "\037\uffd3\040\uffd3\041\uffd3\042\uffd3\043\uffd3\001\002\000" +
    "\006\003\234\033\235\001\002\000\022\003\231\014\107" +
    "\025\075\031\227\033\100\041\073\042\076\043\065\001" +
    "\002\000\006\003\176\033\177\001\002\000\040\003\uffb1" +
    "\013\165\014\162\017\173\020\166\021\167\022\164\023" +
    "\163\024\171\026\uffb1\027\uffb1\031\uffb1\032\uffb1\034\uffb1" +
    "\036\uffb1\001\002\000\052\003\uffbb\013\uffbb\014\uffbb\015" +
    "\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb" +
    "\024\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033" +
    "\151\034\uffbb\035\150\036\uffbb\001\002\000\020\003\uffb3" +
    "\026\uffb3\027\uffb3\031\uffb3\032\uffb3\034\uffb3\036\uffb3\001" +
    "\002\000\020\003\110\014\107\025\075\033\100\041\073" +
    "\042\076\043\065\001\002\000\044\003\uff9d\013\uff9d\014" +
    "\uff9d\015\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d" +
    "\023\uff9d\024\uff9d\026\uff9d\027\uff9d\031\uff9d\032\uff9d\034" +
    "\uff9d\036\uff9d\001\002\000\036\003\uffd9\005\uffd9\006\uffd9" +
    "\010\uffd9\012\uffd9\014\uffd9\025\uffd9\031\uffd9\033\uffd9\037" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\001\002\000\020" +
    "\003\110\014\107\025\075\033\100\041\073\042\076\043" +
    "\065\001\002\000\004\031\144\001\002\000\036\003\uffd6" +
    "\005\uffd6\006\uffd6\010\uffd6\012\uffd6\014\uffd6\025\uffd6\031" +
    "\uffd6\033\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6" +
    "\001\002\000\016\003\uffbc\026\142\031\uffbc\032\uffbc\034" +
    "\uffbc\036\uffbc\001\002\000\044\003\uffa1\013\uffa1\014\uffa1" +
    "\015\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023" +
    "\uffa1\024\uffa1\026\uffa1\027\uffa1\031\uffa1\032\uffa1\034\uffa1" +
    "\036\uffa1\001\002\000\036\003\uffd5\005\uffd5\006\uffd5\010" +
    "\uffd5\012\uffd5\014\uffd5\025\uffd5\031\uffd5\033\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\042\uffd5\043\uffd5\001\002\000\044\003" +
    "\uffa9\013\uffa9\014\uffa9\015\140\016\136\017\uffa9\020\uffa9" +
    "\021\uffa9\022\uffa9\023\uffa9\024\uffa9\026\uffa9\027\uffa9\031" +
    "\uffa9\032\uffa9\034\uffa9\036\uffa9\001\002\000\016\003\110" +
    "\014\107\033\100\041\073\042\076\043\065\001\002\000" +
    "\004\033\126\001\002\000\046\002\uffde\003\uffde\004\uffde" +
    "\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\014" +
    "\uffde\025\uffde\031\uffde\033\uffde\037\uffde\040\uffde\041\uffde" +
    "\042\uffde\043\uffde\001\002\000\020\003\uffb7\026\uffb7\027" +
    "\123\031\uffb7\032\uffb7\034\uffb7\036\uffb7\001\002\000\036" +
    "\003\uffd7\005\uffd7\006\uffd7\010\uffd7\012\uffd7\014\uffd7\025" +
    "\uffd7\031\uffd7\033\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7" +
    "\043\uffd7\001\002\000\044\003\uff9e\013\uff9e\014\uff9e\015" +
    "\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\uff9e\023\uff9e" +
    "\024\uff9e\026\uff9e\027\uff9e\031\uff9e\032\uff9e\034\uff9e\036" +
    "\uff9e\001\002\000\046\003\uff9f\013\uff9f\014\uff9f\015\uff9f" +
    "\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024" +
    "\uff9f\026\uff9f\027\uff9f\030\121\031\uff9f\032\uff9f\034\uff9f" +
    "\036\uff9f\001\002\000\020\003\uffb5\026\uffb5\027\uffb5\031" +
    "\uffb5\032\uffb5\034\uffb5\036\uffb5\001\002\000\034\003\uffdb" +
    "\006\uffdb\010\uffdb\012\uffdb\014\uffdb\025\uffdb\031\uffdb\033" +
    "\uffdb\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\001\002" +
    "\000\044\003\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017" +
    "\uffa5\020\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\026\uffa5" +
    "\027\uffa5\031\uffa5\032\uffa5\034\uffa5\036\uffa5\001\002\000" +
    "\020\003\110\014\107\025\075\033\100\041\073\042\076" +
    "\043\065\001\002\000\014\003\uffbd\031\uffbd\032\uffbd\034" +
    "\uffbd\036\uffbd\001\002\000\020\003\110\014\107\025\075" +
    "\033\100\041\073\042\076\043\065\001\002\000\020\003" +
    "\uffb6\026\uffb6\027\uffb6\031\uffb6\032\uffb6\034\uffb6\036\uffb6" +
    "\001\002\000\044\003\uff9f\013\uff9f\014\uff9f\015\uff9f\016" +
    "\uff9f\017\uff9f\020\uff9f\021\uff9f\022\uff9f\023\uff9f\024\uff9f" +
    "\026\uff9f\027\uff9f\031\uff9f\032\uff9f\034\uff9f\036\uff9f\001" +
    "\002\000\022\003\110\014\107\025\075\033\100\034\uff97" +
    "\041\073\042\076\043\065\001\002\000\004\034\134\001" +
    "\002\000\006\032\132\034\uff98\001\002\000\006\032\uff95" +
    "\034\uff95\001\002\000\020\003\110\014\107\025\075\033" +
    "\100\041\073\042\076\043\065\001\002\000\006\032\uff96" +
    "\034\uff96\001\002\000\044\003\uff99\013\uff99\014\uff99\015" +
    "\uff99\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99" +
    "\024\uff99\026\uff99\027\uff99\031\uff99\032\uff99\034\uff99\036" +
    "\uff99\001\002\000\044\003\uffa2\013\uffa2\014\uffa2\015\uffa2" +
    "\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024" +
    "\uffa2\026\uffa2\027\uffa2\031\uffa2\032\uffa2\034\uffa2\036\uffa2" +
    "\001\002\000\016\003\uffa3\014\uffa3\033\uffa3\041\uffa3\042" +
    "\uffa3\043\uffa3\001\002\000\016\003\110\014\107\033\100" +
    "\041\073\042\076\043\065\001\002\000\016\003\uffa4\014" +
    "\uffa4\033\uffa4\041\uffa4\042\uffa4\043\uffa4\001\002\000\044" +
    "\003\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\017\uffa6\020" +
    "\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\026\uffa6\027\uffa6" +
    "\031\uffa6\032\uffa6\034\uffa6\036\uffa6\001\002\000\020\003" +
    "\110\014\107\025\075\033\100\041\073\042\076\043\065" +
    "\001\002\000\020\003\uffb8\026\uffb8\027\123\031\uffb8\032" +
    "\uffb8\034\uffb8\036\uffb8\001\002\000\036\003\uffd4\005\uffd4" +
    "\006\uffd4\010\uffd4\012\uffd4\014\uffd4\025\uffd4\031\uffd4\033" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\001\002" +
    "\000\004\034\146\001\002\000\044\003\uffa0\013\uffa0\014" +
    "\uffa0\015\uffa0\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0" +
    "\023\uffa0\024\uffa0\026\uffa0\027\uffa0\031\uffa0\032\uffa0\034" +
    "\uffa0\036\uffa0\001\002\000\020\003\uffb4\026\uffb4\027\uffb4" +
    "\031\uffb4\032\uffb4\034\uffb4\036\uffb4\001\002\000\020\003" +
    "\157\014\107\025\075\033\100\041\073\042\076\043\065" +
    "\001\002\000\022\003\153\014\107\025\075\033\100\034" +
    "\uff97\041\073\042\076\043\065\001\002\000\004\034\155" +
    "\001\002\000\006\033\126\034\154\001\002\000\044\003" +
    "\uff9a\013\uff9a\014\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a" +
    "\021\uff9a\022\uff9a\023\uff9a\024\uff9a\026\uff9a\027\uff9a\031" +
    "\uff9a\032\uff9a\034\uff9a\036\uff9a\001\002\000\044\003\uff9b" +
    "\013\uff9b\014\uff9b\015\uff9b\016\uff9b\017\uff9b\020\uff9b\021" +
    "\uff9b\022\uff9b\023\uff9b\024\uff9b\026\uff9b\027\uff9b\031\uff9b" +
    "\032\uff9b\034\uff9b\036\uff9b\001\002\000\004\036\161\001" +
    "\002\000\006\033\126\036\160\001\002\000\046\003\uffba" +
    "\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba\021" +
    "\uffba\022\uffba\023\uffba\024\uffba\026\uffba\027\uffba\030\uffba" +
    "\031\uffba\032\uffba\034\uffba\036\uffba\001\002\000\046\003" +
    "\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9" +
    "\021\uffb9\022\uffb9\023\uffb9\024\uffb9\026\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\032\uffb9\034\uffb9\036\uffb9\001\002\000\016" +
    "\003\uffa7\014\uffa7\033\uffa7\041\uffa7\042\uffa7\043\uffa7\001" +
    "\002\000\016\003\uffac\014\uffac\033\uffac\041\uffac\042\uffac" +
    "\043\uffac\001\002\000\016\003\uffad\014\uffad\033\uffad\041" +
    "\uffad\042\uffad\043\uffad\001\002\000\016\003\uffa8\014\uffa8" +
    "\033\uffa8\041\uffa8\042\uffa8\043\uffa8\001\002\000\016\003" +
    "\uffb0\014\uffb0\033\uffb0\041\uffb0\042\uffb0\043\uffb0\001\002" +
    "\000\016\003\uffae\014\uffae\033\uffae\041\uffae\042\uffae\043" +
    "\uffae\001\002\000\016\003\110\014\107\033\100\041\073" +
    "\042\076\043\065\001\002\000\016\003\uffab\014\uffab\033" +
    "\uffab\041\uffab\042\uffab\043\uffab\001\002\000\016\003\110" +
    "\014\107\033\100\041\073\042\076\043\065\001\002\000" +
    "\016\003\uffaf\014\uffaf\033\uffaf\041\uffaf\042\uffaf\043\uffaf" +
    "\001\002\000\044\003\uffaa\013\uffaa\014\uffaa\015\140\016" +
    "\136\017\uffaa\020\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa" +
    "\026\uffaa\027\uffaa\031\uffaa\032\uffaa\034\uffaa\036\uffaa\001" +
    "\002\000\024\003\uffb2\013\165\014\162\026\uffb2\027\uffb2" +
    "\031\uffb2\032\uffb2\034\uffb2\036\uffb2\001\002\000\034\003" +
    "\110\006\071\010\070\012\067\014\107\025\075\031\066" +
    "\033\100\034\217\037\033\041\073\042\076\043\065\001" +
    "\002\000\020\003\201\014\107\025\075\033\100\041\073" +
    "\042\076\043\065\001\002\000\006\003\211\034\212\001" +
    "\002\000\034\003\110\006\071\010\070\012\067\014\107" +
    "\025\075\031\066\033\202\034\203\037\033\041\073\042" +
    "\076\043\065\001\002\000\022\003\110\014\107\025\075" +
    "\033\100\034\uff97\041\073\042\076\043\065\001\002\000" +
    "\032\003\110\006\071\010\070\012\067\014\107\025\075" +
    "\031\066\033\100\037\033\041\073\042\076\043\065\001" +
    "\002\000\036\003\uffcf\005\uffcf\006\uffcf\010\uffcf\012\uffcf" +
    "\014\uffcf\025\uffcf\031\uffcf\033\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\042\uffcf\043\uffcf\001\002\000\036\003\uffcc\005\206" +
    "\006\uffcc\010\uffcc\012\uffcc\014\uffcc\025\uffcc\031\uffcc\033" +
    "\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\001\002" +
    "\000\032\003\110\006\071\010\070\012\067\014\107\025" +
    "\075\031\066\033\100\037\033\041\073\042\076\043\065" +
    "\001\002\000\036\003\uffc9\005\uffc9\006\uffc9\010\uffc9\012" +
    "\uffc9\014\uffc9\025\uffc9\031\uffc9\033\uffc9\037\uffc9\040\uffc9" +
    "\041\uffc9\042\uffc9\043\uffc9\001\002\000\006\032\uff95\034" +
    "\146\001\002\000\032\003\110\006\071\010\070\012\067" +
    "\014\107\025\075\031\066\033\100\037\033\041\073\042" +
    "\076\043\065\001\002\000\032\003\110\006\071\010\070" +
    "\012\067\014\107\025\075\031\066\033\100\037\033\041" +
    "\073\042\076\043\065\001\002\000\036\003\uffd2\005\214" +
    "\006\uffd2\010\uffd2\012\uffd2\014\uffd2\025\uffd2\031\uffd2\033" +
    "\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\001\002" +
    "\000\032\003\110\006\071\010\070\012\067\014\107\025" +
    "\075\031\066\033\100\037\033\041\073\042\076\043\065" +
    "\001\002\000\036\003\uffd1\005\uffd1\006\uffd1\010\uffd1\012" +
    "\uffd1\014\uffd1\025\uffd1\031\uffd1\033\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\042\uffd1\043\uffd1\001\002\000\036\003\uffcd\005" +
    "\uffcd\006\uffcd\010\uffcd\012\uffcd\014\uffcd\025\uffcd\031\uffcd" +
    "\033\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\001" +
    "\002\000\032\003\110\006\071\010\070\012\067\014\107" +
    "\025\075\031\066\033\100\037\033\041\073\042\076\043" +
    "\065\001\002\000\006\031\144\034\222\001\002\000\036" +
    "\003\uffce\005\uffce\006\uffce\010\uffce\012\uffce\014\uffce\025" +
    "\uffce\031\uffce\033\uffce\037\uffce\040\uffce\041\uffce\042\uffce" +
    "\043\uffce\001\002\000\032\003\110\006\071\010\070\012" +
    "\067\014\107\025\075\031\066\033\100\037\033\041\073" +
    "\042\076\043\065\001\002\000\036\003\uffd0\005\224\006" +
    "\uffd0\010\uffd0\012\uffd0\014\uffd0\025\uffd0\031\uffd0\033\uffd0" +
    "\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\001\002\000" +
    "\032\003\110\006\071\010\070\012\067\014\107\025\075" +
    "\031\066\033\100\037\033\041\073\042\076\043\065\001" +
    "\002\000\036\003\uffca\005\uffca\006\uffca\010\uffca\012\uffca" +
    "\014\uffca\025\uffca\031\uffca\033\uffca\037\uffca\040\uffca\041" +
    "\uffca\042\uffca\043\uffca\001\002\000\036\003\uffcb\005\uffcb" +
    "\006\uffcb\010\uffcb\012\uffcb\014\uffcb\025\uffcb\031\uffcb\033" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\001\002" +
    "\000\036\003\uffc0\005\uffc0\006\uffc0\010\uffc0\012\uffc0\014" +
    "\uffc0\025\uffc0\031\uffc0\033\uffc0\037\uffc0\040\uffc0\041\uffc0" +
    "\042\uffc0\043\uffc0\001\002\000\004\031\233\001\002\000" +
    "\036\003\uffbe\005\uffbe\006\uffbe\010\uffbe\012\uffbe\014\uffbe" +
    "\025\uffbe\031\232\033\126\037\uffbe\040\uffbe\041\uffbe\042" +
    "\uffbe\043\uffbe\001\002\000\036\003\uffbf\005\uffbf\006\uffbf" +
    "\010\uffbf\012\uffbf\014\uffbf\025\uffbf\031\uffbf\033\uffbf\037" +
    "\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\001\002\000\036" +
    "\003\uffc1\005\uffc1\006\uffc1\010\uffc1\012\uffc1\014\uffc1\025" +
    "\uffc1\031\uffc1\033\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1" +
    "\043\uffc1\001\002\000\034\003\110\006\071\010\070\012" +
    "\067\014\107\025\075\031\066\033\100\034\247\037\033" +
    "\041\073\042\076\043\065\001\002\000\020\003\237\014" +
    "\107\025\075\033\100\041\073\042\076\043\065\001\002" +
    "\000\006\003\243\034\244\001\002\000\034\003\110\006" +
    "\071\010\070\012\067\014\107\025\075\031\066\033\202" +
    "\034\240\037\033\041\073\042\076\043\065\001\002\000" +
    "\032\003\110\006\071\010\070\012\067\014\107\025\075" +
    "\031\066\033\100\037\033\041\073\042\076\043\065\001" +
    "\002\000\036\003\uffc4\005\uffc4\006\uffc4\010\uffc4\012\uffc4" +
    "\014\uffc4\025\uffc4\031\uffc4\033\uffc4\037\uffc4\040\uffc4\041" +
    "\uffc4\042\uffc4\043\uffc4\001\002\000\036\003\uffc6\005\uffc6" +
    "\006\uffc6\010\uffc6\012\uffc6\014\uffc6\025\uffc6\031\uffc6\033" +
    "\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\001\002" +
    "\000\032\003\110\006\071\010\070\012\067\014\107\025" +
    "\075\031\066\033\100\037\033\041\073\042\076\043\065" +
    "\001\002\000\032\003\110\006\071\010\070\012\067\014" +
    "\107\025\075\031\066\033\100\037\033\041\073\042\076" +
    "\043\065\001\002\000\036\003\uffc8\005\uffc8\006\uffc8\010" +
    "\uffc8\012\uffc8\014\uffc8\025\uffc8\031\uffc8\033\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\uffc8\001\002\000\036\003" +
    "\uffc5\005\uffc5\006\uffc5\010\uffc5\012\uffc5\014\uffc5\025\uffc5" +
    "\031\uffc5\033\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043" +
    "\uffc5\001\002\000\032\003\110\006\071\010\070\012\067" +
    "\014\107\025\075\031\066\033\100\037\033\041\073\042" +
    "\076\043\065\001\002\000\006\031\144\034\252\001\002" +
    "\000\036\003\uffc2\005\uffc2\006\uffc2\010\uffc2\012\uffc2\014" +
    "\uffc2\025\uffc2\031\uffc2\033\uffc2\037\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\001\002\000\032\003\110\006\071\010" +
    "\070\012\067\014\107\025\075\031\066\033\100\037\033" +
    "\041\073\042\076\043\065\001\002\000\036\003\uffc7\005" +
    "\uffc7\006\uffc7\010\uffc7\012\uffc7\014\uffc7\025\uffc7\031\uffc7" +
    "\033\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\001" +
    "\002\000\036\003\uffc3\005\uffc3\006\uffc3\010\uffc3\012\uffc3" +
    "\014\uffc3\025\uffc3\031\uffc3\033\uffc3\037\uffc3\040\uffc3\041" +
    "\uffc3\042\uffc3\043\uffc3\001\002\000\010\004\006\007\005" +
    "\011\011\001\002\000\010\003\uffe2\032\uffe2\034\uffe2\001" +
    "\002\000\012\003\260\031\052\033\261\035\051\001\002" +
    "\000\020\002\ufff3\003\ufff3\004\006\007\005\011\024\031" +
    "\276\042\061\001\002\000\012\003\262\004\006\007\005" +
    "\011\024\001\002\000\004\034\272\001\002\000\006\003" +
    "\264\034\265\001\002\000\006\031\271\037\033\001\002" +
    "\000\006\031\267\037\033\001\002\000\014\002\uffef\003" +
    "\uffef\004\uffef\007\uffef\011\uffef\001\002\000\014\002\uffea" +
    "\003\uffea\004\uffea\007\uffea\011\uffea\001\002\000\014\002" +
    "\uffec\003\uffec\004\uffec\007\uffec\011\uffec\001\002\000\014" +
    "\002\uffe7\003\uffe7\004\uffe7\007\uffe7\011\uffe7\001\002\000" +
    "\006\031\274\037\033\001\002\000\014\002\uffeb\003\uffeb" +
    "\004\uffeb\007\uffeb\011\uffeb\001\002\000\014\002\uffe6\003" +
    "\uffe6\004\uffe6\007\uffe6\011\uffe6\001\002\000\004\034\277" +
    "\001\002\000\014\002\uffe5\003\uffe5\004\uffe5\007\uffe5\011" +
    "\uffe5\001\002\000\006\031\301\037\033\001\002\000\014" +
    "\002\uffed\003\uffed\004\uffed\007\uffed\011\uffed\001\002\000" +
    "\014\002\uffe8\003\uffe8\004\uffe8\007\uffe8\011\uffe8\001\002" +
    "\000\004\002\000\001\002\000\014\002\ufffe\003\ufffe\004" +
    "\ufffe\007\ufffe\011\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\020\002\013\003\006\004\007\005\015\006" +
    "\011\031\012\032\003\001\001\000\014\002\013\003\302" +
    "\004\007\005\015\006\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\002\024\007\021\033\022\034\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\031\001\001\000\002" +
    "\001\001\000\004\035\034\001\001\000\002\001\001\000" +
    "\010\002\037\006\035\036\036\001\001\000\002\001\001" +
    "\000\044\010\112\011\102\012\111\013\115\014\100\015" +
    "\076\016\101\017\104\020\116\021\063\022\113\023\103" +
    "\024\117\025\105\026\071\027\073\030\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\011\102\012\111\013\115\014" +
    "\227\022\113\023\103\024\117\025\105\026\071\027\073" +
    "\030\114\001\001\000\002\001\001\000\006\041\171\043" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\013\146\022\113\023\103\024\117\025\105\026\071\027" +
    "\073\030\124\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\011\102\012\111\013\115\014\144\022\113\023" +
    "\103\024\117\025\105\026\071\027\073\030\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\042\136\001\001" +
    "\000\012\022\113\023\103\024\134\030\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\011\102" +
    "\012\111\013\115\014\121\022\113\023\103\024\117\025" +
    "\105\026\071\027\073\030\114\001\001\000\002\001\001" +
    "\000\022\013\123\022\113\023\103\024\117\025\105\026" +
    "\071\027\073\030\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\011\102\012\111\013\115\014\130\022" +
    "\113\023\103\024\117\025\105\026\071\027\073\030\114" +
    "\037\126\040\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\011\102\012\111\013\115" +
    "\014\132\022\113\023\103\024\117\025\105\026\071\027" +
    "\073\030\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\022\113\023" +
    "\103\024\140\030\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\012\142\013\115\022\113\023\103\024" +
    "\117\025\105\026\071\027\073\030\124\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\011\102\012\111\013\115" +
    "\014\155\022\113\023\103\024\117\025\105\026\071\027" +
    "\073\030\114\001\001\000\034\011\102\012\111\013\115" +
    "\014\130\022\113\023\103\024\117\025\105\026\071\027" +
    "\073\030\114\037\151\040\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\022\113\023\103\024\117\025\105\026\174\030" +
    "\124\001\001\000\002\001\001\000\014\022\113\023\103" +
    "\024\117\025\173\030\124\001\001\000\002\001\001\000" +
    "\004\042\136\001\001\000\004\041\171\001\001\000\044" +
    "\010\112\011\102\012\111\013\115\014\217\015\076\016" +
    "\101\017\104\020\220\021\063\022\113\023\103\024\117" +
    "\025\105\026\071\027\073\030\114\001\001\000\030\011" +
    "\102\012\111\013\115\014\177\022\113\023\103\024\117" +
    "\025\105\026\071\027\073\030\114\001\001\000\002\001" +
    "\001\000\044\010\112\011\102\012\111\013\115\014\100" +
    "\015\076\016\101\017\104\020\203\021\063\022\113\023" +
    "\103\024\117\025\105\026\071\027\073\030\114\001\001" +
    "\000\034\011\102\012\111\013\115\014\207\022\113\023" +
    "\103\024\117\025\105\026\071\027\073\030\114\037\126" +
    "\040\127\001\001\000\044\010\112\011\102\012\111\013" +
    "\115\014\100\015\076\016\101\017\104\020\204\021\063" +
    "\022\113\023\103\024\117\025\105\026\071\027\073\030" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\010\112\011\102\012\111\013\115\014\100\015\076\016" +
    "\101\017\104\020\206\021\063\022\113\023\103\024\117" +
    "\025\105\026\071\027\073\030\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\010\112\011\102\012\111" +
    "\013\115\014\100\015\076\016\101\017\104\020\215\021" +
    "\063\022\113\023\103\024\117\025\105\026\071\027\073" +
    "\030\114\001\001\000\044\010\112\011\102\012\111\013" +
    "\115\014\100\015\076\016\101\017\104\020\212\021\063" +
    "\022\113\023\103\024\117\025\105\026\071\027\073\030" +
    "\114\001\001\000\002\001\001\000\044\010\112\011\102" +
    "\012\111\013\115\014\100\015\076\016\101\017\104\020" +
    "\214\021\063\022\113\023\103\024\117\025\105\026\071" +
    "\027\073\030\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\010\112\011\102\012\111\013\115\014\100" +
    "\015\076\016\101\017\104\020\225\021\063\022\113\023" +
    "\103\024\117\025\105\026\071\027\073\030\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\010\112\011" +
    "\102\012\111\013\115\014\100\015\076\016\101\017\104" +
    "\020\222\021\063\022\113\023\103\024\117\025\105\026" +
    "\071\027\073\030\114\001\001\000\002\001\001\000\044" +
    "\010\112\011\102\012\111\013\115\014\100\015\076\016" +
    "\101\017\104\020\224\021\063\022\113\023\103\024\117" +
    "\025\105\026\071\027\073\030\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\010\112\011\102\012\111\013\115\014\247\015\076" +
    "\016\101\017\104\020\250\021\063\022\113\023\103\024" +
    "\117\025\105\026\071\027\073\030\114\001\001\000\030" +
    "\011\102\012\111\013\115\014\235\022\113\023\103\024" +
    "\117\025\105\026\071\027\073\030\114\001\001\000\002" +
    "\001\001\000\044\010\112\011\102\012\111\013\115\014" +
    "\100\015\076\016\101\017\104\020\240\021\063\022\113" +
    "\023\103\024\117\025\105\026\071\027\073\030\114\001" +
    "\001\000\044\010\112\011\102\012\111\013\115\014\100" +
    "\015\076\016\101\017\104\020\241\021\063\022\113\023" +
    "\103\024\117\025\105\026\071\027\073\030\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\010\112\011" +
    "\102\012\111\013\115\014\100\015\076\016\101\017\104" +
    "\020\245\021\063\022\113\023\103\024\117\025\105\026" +
    "\071\027\073\030\114\001\001\000\044\010\112\011\102" +
    "\012\111\013\115\014\100\015\076\016\101\017\104\020" +
    "\244\021\063\022\113\023\103\024\117\025\105\026\071" +
    "\027\073\030\114\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\010\112\011\102\012\111\013\115\014\100" +
    "\015\076\016\101\017\104\020\253\021\063\022\113\023" +
    "\103\024\117\025\105\026\071\027\073\030\114\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\010\112\011" +
    "\102\012\111\013\115\014\100\015\076\016\101\017\104" +
    "\020\252\021\063\022\113\023\103\024\117\025\105\026" +
    "\071\027\073\030\114\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\024\007\255\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\002\024\007\021\033\274" +
    "\034\020\001\001\000\012\002\024\007\021\033\262\034" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\267\001\001\000\004\021\265\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\272\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\277" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static boolean isValid = true;

    public void report_error(String message, Object info, int eleft, int eright) {
        isValid = false;
        StringBuffer m = new StringBuffer("Error");

        m.append(" in line "+ (eleft +1) + " column " + (eright+1));
        m.append(" : " + message);
   
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info, int eleft, int eright) {
      
        report_error(message, info, eleft, eright);
        System.exit(1);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= declarationList 
            {
              DecList RESULT =null;
		int decListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DecList decList = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = decList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DecList start_val = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= 
            {
              DecList RESULT =null;
		 RESULT = null;
                     System.err.println("Invalid Program: File is possibly Empty");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declarationList ::= declarationList declaration 
            {
              DecList RESULT =null;
		int decListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DecList decList = (DecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  // Iterate to end of dec list and append new dec
                        DecList dList = decList;
                        while (dList.tail != null) {
                           dList = dList.tail;
                        }
                        dList.tail = new DecList(dec, null);
                        RESULT = decList;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarationList",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarationList ::= declaration 
            {
              DecList RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DecList(dec, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarationList",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= varDeclaration 
            {
              Dec RESULT =null;
		int varDecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varDecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec varDec = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = varDec; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= funDeclaration 
            {
              Dec RESULT =null;
		int funcDecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcDecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec funcDec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = funcDec; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= funPrototype 
            {
              Dec RESULT =null;
		int funPrototypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funPrototyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec funPrototype = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = funPrototype; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // varDeclaration ::= typeSpecifier ID SEMI 
            {
              VarDec RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NameType ts = (NameType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SimpleDec(tsleft, tsright, ts, name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // varDeclaration ::= typeSpecifier ID LSB NUM RSB SEMI 
            {
              VarDec RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameType ts = (NameType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArrayDec(tsleft, tsright, ts, name, Integer.parseInt(num)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // varDeclaration ::= typeSpecifier error SEMI 
            {
              VarDec RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NameType ts = (NameType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Invalid Variable Declaration Name ",e, eleft, eright);
                        RESULT = new SimpleDec(tsleft, tsright, ts, "");
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // varDeclaration ::= typeSpecifier error LSB NUM RSB SEMI 
            {
              VarDec RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameType ts = (NameType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Invalid Variable Name for Array",e, eleft, eright);
                        RESULT = new ArrayDec(tsleft, tsright, ts, "", Integer.parseInt(num));
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // varDeclaration ::= typeSpecifier ID error NUM RSB SEMI 
            {
              VarDec RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameType ts = (NameType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Missing Left Square Bracket for Array ",e, eleft, eright);
                        RESULT = new ArrayDec(tsleft, tsright, ts, name, Integer.parseInt(num));
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // varDeclaration ::= typeSpecifier ID LSB error RSB SEMI 
            {
              VarDec RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameType ts = (NameType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Invalid Size for Array ",e, eleft, eright);
                        RESULT = new ArrayDec(tsleft, tsright, ts, name, 0);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // varDeclaration ::= typeSpecifier ID error 
            {
              VarDec RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NameType ts = (NameType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Missing Semicolon  ",e, eleft, eright);
                       RESULT = new SimpleDec(tsleft, tsright, ts, name);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("varDeclaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // typeSpecifier ::= BOOL 
            {
              NameType RESULT =null;
		int Bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object B = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NameType(Bleft,Bright,NameType.BOOL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeSpecifier",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // typeSpecifier ::= INT 
            {
              NameType RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NameType(Ileft,Iright,NameType.INT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeSpecifier",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // typeSpecifier ::= VOID 
            {
              NameType RESULT =null;
		int Vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int Vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object V = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new NameType(Vleft,Vright,NameType.VOID); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeSpecifier",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // funDeclaration ::= typeSpecifier ID LB params RB compoundStmt 
            {
              Dec RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameType ts = (NameType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList params = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cmpStmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cmpStmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp cmpStmt = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FuncDeclaration(tsleft, tsright, ts, name, params, cmpStmt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // funDeclaration ::= error ID LB params RB compoundStmt 
            {
              Dec RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList params = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cmpStmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cmpStmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp cmpStmt = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Invalid Type Specifier for Function",e, eleft, eright);
                        RESULT = new FuncDeclaration(eleft, eright, null, name, params, cmpStmt);;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // funDeclaration ::= typeSpecifier ID error params RB compoundStmt 
            {
              Dec RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameType ts = (NameType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList params = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cmpStmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cmpStmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp cmpStmt = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Missing Left Bracket for Parameter List", e, eleft, eright);
                        RESULT = new FuncDeclaration(tsleft, tsright, ts, name, params, cmpStmt);;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // funDeclaration ::= typeSpecifier ID LB params error compoundStmt 
            {
              Dec RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameType ts = (NameType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList params = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cmpStmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cmpStmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp cmpStmt = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Missing Right Bracket for Parameter List", e, eleft, eright);
                        RESULT = new FuncDeclaration(tsleft, tsright, ts, name, params, cmpStmt);;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // funDeclaration ::= typeSpecifier ID LB error RB compoundStmt 
            {
              Dec RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameType ts = (NameType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cmpStmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cmpStmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp cmpStmt = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Invalid Parameter for function", e, eleft, eright);
                        RESULT = new FuncDeclaration(tsleft, tsright, ts, name, null, cmpStmt);;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // funPrototype ::= typeSpecifier ID LB params RB SEMI 
            {
              Dec RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameType ts = (NameType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int LBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int LBright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object LB = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList params = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int RBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int RBright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object RB = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int SEMIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int SEMIright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object SEMI = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FuncDeclaration(tsleft, tsright, ts, name, params, new NilExp(paramsleft, paramsright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funPrototype",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // funPrototype ::= error ID LB params RB SEMI 
            {
              Dec RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int LBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int LBright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object LB = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList params = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int RBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int RBright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object RB = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int SEMIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int SEMIright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object SEMI = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Invalid Type Specifier for Function",e, eleft, eright);
                        RESULT = new FuncDeclaration(eleft, eright, null, name, params, new NilExp(paramsleft, paramsright)); ;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funPrototype",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // funPrototype ::= typeSpecifier ID error params RB SEMI 
            {
              Dec RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameType ts = (NameType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList params = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int RBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int RBright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object RB = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int SEMIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int SEMIright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object SEMI = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Missing Left Bracket for Parameter List", e, eleft, eright);
                        RESULT = new FuncDeclaration(tsleft, tsright, ts, name, params, new NilExp(paramsleft, paramsright));;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funPrototype",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // funPrototype ::= typeSpecifier ID LB params error SEMI 
            {
              Dec RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameType ts = (NameType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int LBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int LBright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object LB = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList params = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int SEMIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int SEMIright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object SEMI = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Missing Right Bracket for Parameter List", e, eleft, eright);
                        RESULT = new FuncDeclaration(tsleft, tsright, ts, name, params, new NilExp(paramsleft, paramsright));;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funPrototype",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // funPrototype ::= typeSpecifier ID LB error RB SEMI 
            {
              Dec RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NameType ts = (NameType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int LBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int LBright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object LB = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parser.report_error("Invalid Parameter for Function prototype", e, eleft, eright);
                        RESULT = new FuncDeclaration(tsleft, tsright, ts, name, null, new NilExp(eleft, eright));;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funPrototype",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // funPrototype ::= typeSpecifier ID error SEMI 
            {
              Dec RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NameType ts = (NameType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 parser.report_error("Missing Brackets",e, eleft, eright);
                        RESULT = new FuncDeclaration(eleft, eright,ts, name, null , new NilExp(tsleft, tsright)); ;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funPrototype",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // params ::= paramList 
            {
              VarDecList RESULT =null;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecList paramList = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = paramList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // params ::= VOID 
            {
              VarDecList RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("params",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // paramList ::= paramList COMMA param 
            {
              VarDecList RESULT =null;
		int pListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList pList = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec param = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        VarDecList vList = pList;
                        while (vList.tail != null) {
                           vList = vList.tail;
                        }
                        vList.tail = new VarDecList(param, null);
                        RESULT = pList;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramList",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // paramList ::= param 
            {
              VarDecList RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec param = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDecList(param, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("paramList",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // param ::= typeSpecifier ID 
            {
              VarDec RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NameType ts = (NameType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SimpleDec(tsleft, tsright, ts, name); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // param ::= typeSpecifier ID LSB RSB 
            {
              VarDec RESULT =null;
		int tsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NameType ts = (NameType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayDec(tsleft, tsright, ts, name, 0); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // compoundStmt ::= LCB localDeclarations stmtList RCB 
            {
              Exp RESULT =null;
		int lcbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lcbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object lcb = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDecList ld = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList sl = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CompoundExp(lcbleft,lcbright,ld,sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compoundStmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // localDeclarations ::= localDeclarations varDeclaration 
            {
              VarDecList RESULT =null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDecList ld = (VarDecList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varDecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varDecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDec varDec = (VarDec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                        VarDecList vList = ld;
                        while (vList.tail != null) {
                           vList = vList.tail;
                        }
                        vList.tail = new VarDecList(varDec, null);
                        RESULT = ld;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("localDeclarations",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // localDeclarations ::= 
            {
              VarDecList RESULT =null;
		 RESULT = new VarDecList(null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("localDeclarations",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmtList ::= stmtList stmt 
            {
              ExpList RESULT =null;
		int sListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList sList = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp stmt = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        ExpList eList = sList;
                        while (eList.tail != null) {
                           eList = eList.tail;
                        }
                        eList.tail = new ExpList(stmt, null);
                        RESULT = sList;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtList",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmtList ::= 
            {
              ExpList RESULT =null;
		 RESULT = new ExpList(null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmtList",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= expressionStmt 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= compoundStmt 
            {
              Exp RESULT =null;
		int cmpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cmpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp cmp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cmp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmt ::= selectionStmt 
            {
              Exp RESULT =null;
		int selectleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int selectright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp select = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = select; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmt ::= iterationStmt 
            {
              Exp RESULT =null;
		int iterleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iterright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp iter = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = iter; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmt ::= returnStmt 
            {
              Exp RESULT =null;
		int rtnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rtnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp rtn = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rtn; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expressionStmt ::= expression SEMI 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionStmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expressionStmt ::= SEMI 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NilExp(sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expressionStmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // selectionStmt ::= IF LB expression RB stmt 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp stmt = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfExp(fleft, fright, exp, stmt, new NilExp(stmtleft, stmtright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectionStmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // selectionStmt ::= IF LB expression RB stmt ELSE stmt 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp stmt = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int estmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int estmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp estmt = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfExp(fleft, fright, exp, stmt, estmt); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectionStmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // selectionStmt ::= IF error expression RB stmt 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp stmt = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                        parser.report_error("Missing Left Bracket", e, eleft, eright);
                        RESULT = new IfExp(fleft, fright, exp, stmt, new NilExp(stmtleft, stmtright)); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectionStmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // selectionStmt ::= IF LB error stmt 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp stmt = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                        parser.report_error("Missing Condition", e, eleft, eright);
                         RESULT = new IfExp(fleft, fright, new NilExp(eleft, eright), stmt, new NilExp(stmtleft, stmtright)); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectionStmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // selectionStmt ::= IF error stmt 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp stmt = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                        parser.report_error("Missing Condition", e, eleft, eright);
                         RESULT = new IfExp(fleft, fright, new NilExp(eleft, eright), stmt, new NilExp(stmtleft, stmtright)); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectionStmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // selectionStmt ::= IF LB expression error stmt 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp stmt = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
                        parser.report_error("Missing Right Bracket", e, eleft, eright);
                        RESULT = new IfExp(fleft, fright, exp, stmt, new NilExp(stmtleft, stmtright)); 
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectionStmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // selectionStmt ::= IF LB error RB stmt 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp stmt = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Missing Condition", e, eleft, eright);
                        RESULT = new IfExp(fleft, fright, new NilExp(eleft, eright), stmt, new NilExp(stmtleft, stmtright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectionStmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // selectionStmt ::= IF error RB stmt 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp stmt = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Missing Condition", e, eleft, eright);
                        RESULT = new IfExp(fleft, fright, new NilExp(eleft, eright), stmt, new NilExp(stmtleft, stmtright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectionStmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // selectionStmt ::= IF error expression RB stmt ELSE stmt 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp stmt = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int estmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int estmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp estmt = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfExp(fleft, fright, exp, stmt, estmt); 
                        parser.report_error("Missing Left Bracket", e, eleft, eright);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectionStmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // selectionStmt ::= IF LB error RB stmt ELSE stmt 
            {
              Exp RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp stmt = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int estmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int estmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp estmt = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfExp(fleft, fright,  new NilExp(eleft, eright), stmt, estmt); 
                         parser.report_error("Missing condition", e, eleft, eright);
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectionStmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // iterationStmt ::= WHILE LB expression RB stmt 
            {
              Exp RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp stmt = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                      RESULT = new WhileExp(expleft, expright, exp, stmt); 
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iterationStmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // iterationStmt ::= WHILE error expression RB stmt 
            {
              Exp RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp stmt = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileExp(wleft, wright, exp, stmt); 
                           parser.report_error("Missing Left Bracket", e, eleft, eright);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iterationStmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // iterationStmt ::= WHILE LB error RB stmt 
            {
              Exp RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp stmt = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileExp(wleft, wright, new NilExp(eleft, eright), stmt); 
                           parser.report_error("Missing Condition", e, eleft, eright);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iterationStmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // iterationStmt ::= WHILE LB expression error stmt 
            {
              Exp RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp stmt = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileExp(wleft, wright, exp, stmt); 
                           parser.report_error("Missing Right Bracket", e, eleft, eright);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iterationStmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // iterationStmt ::= WHILE LB error stmt 
            {
              Exp RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp stmt = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileExp(wleft, wright,new NilExp(eleft, eright) , stmt); 
                           parser.report_error("Missing Condition ", e, eleft, eright);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iterationStmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // iterationStmt ::= WHILE error RB stmt 
            {
              Exp RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp stmt = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileExp(wleft, wright,new NilExp(eleft, eright) , stmt); 
                           parser.report_error("Missing Left Bracket ", e, eleft, eright);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iterationStmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // iterationStmt ::= WHILE error stmt 
            {
              Exp RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp stmt = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileExp(wleft, wright,new NilExp(eleft, eright) , stmt); 
                           parser.report_error("Missing Condition  ", e, eleft, eright);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iterationStmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // returnStmt ::= RETURN expression SEMI 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnExp(expleft, expright, exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnStmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // returnStmt ::= RETURN SEMI 
            {
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NilExp(sleft, sright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnStmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // returnStmt ::= RETURN error SEMI 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Invalid return statment (invalid expression)", e, eleft, eright);
                          RESULT = new ReturnExp(eleft, eright, new NilExp(eleft, eright));
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnStmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // returnStmt ::= RETURN error 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("Invalid return statment (missing semicolon)", e, eleft, eright);
                          RESULT = new ReturnExp(eleft, eright, new NilExp(eleft, eright));
                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("returnStmt",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression ::= var EQ expression 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignExp(varleft, varright, new VarExp(varleft, varright, var), exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expression ::= oBoolExpression 
            {
              Exp RESULT =null;
		int orExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int orExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp orExp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = orExp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // var ::= ID 
            {
              Var RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ID = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SimpleVar(IDleft, IDright, ID); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // var ::= ID LSB error RSB 
            {
              Var RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ID = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IndexVar(IDleft, IDright, ID,  new NilExp(eleft, eright)); 
                        parser.report_error("Invalid variable statement Array", e, eleft, eright);
                      
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // var ::= ID LSB expression RSB 
            {
              Var RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ID = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IndexVar(IDleft, IDright, ID, exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("var",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // oBoolExpression ::= oBoolExpression OR aBoolExpression 
            {
              Exp RESULT =null;
		int oExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp oExp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp aExp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(oExpleft, oExpright, oExp, OpExp.OR, aExp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("oBoolExpression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // oBoolExpression ::= aBoolExpression 
            {
              Exp RESULT =null;
		int aExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp aExp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = aExp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("oBoolExpression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // aBoolExpression ::= aBoolExpression AND uBoolExpression 
            {
              Exp RESULT =null;
		int aExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp aExp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int uExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp uExp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(aExpleft, aExpright, aExp, OpExp.AND, uExp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("aBoolExpression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // aBoolExpression ::= uBoolExpression 
            {
              Exp RESULT =null;
		int uExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp uExp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = uExp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("aBoolExpression",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // uBoolExpression ::= TILDE uBoolExpression 
            {
              Exp RESULT =null;
		int uExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int uExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp uExp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(uExpleft, uExpright, new NilExp(uExpleft, uExpright), OpExp.TILDE, uExp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("uBoolExpression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // uBoolExpression ::= simpleExpression 
            {
              Exp RESULT =null;
		int simpExpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simpExpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp simpExp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = simpExp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("uBoolExpression",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // simpleExpression ::= additiveExpression relop additiveExpression 
            {
              Exp RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(exp1left, exp1right, exp1, op, exp2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // simpleExpression ::= additiveExpression 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simpleExpression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // relop ::= LE 
            {
              Integer RESULT =null;
		 RESULT = OpExp.LE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // relop ::= LT 
            {
              Integer RESULT =null;
		 RESULT = OpExp.LT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // relop ::= GT 
            {
              Integer RESULT =null;
		 RESULT = OpExp.GT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // relop ::= GE 
            {
              Integer RESULT =null;
		 RESULT = OpExp.GE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // relop ::= EQEQ 
            {
              Integer RESULT =null;
		 RESULT = OpExp.EQ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // relop ::= NE 
            {
              Integer RESULT =null;
		 RESULT = OpExp.NE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relop",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // additiveExpression ::= additiveExpression addOp term 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp term = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(expleft, expright, exp, op, term); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additiveExpression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // additiveExpression ::= term 
            {
              Exp RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp term = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = term; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additiveExpression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // addOp ::= PLUS 
            {
              Integer RESULT =null;
		 RESULT = OpExp.PLUS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addOp",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // addOp ::= MINUS 
            {
              Integer RESULT =null;
		 RESULT = OpExp.MINUS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addOp",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // term ::= term mulOp signedFactor 
            {
              Exp RESULT =null;
		int termleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int termright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp term = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mulopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mulopright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer mulop = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int signedFactorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int signedFactorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp signedFactor = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(termleft, termright, term, mulop, signedFactor); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // term ::= signedFactor 
            {
              Exp RESULT =null;
		int signedFactorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int signedFactorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp signedFactor = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = signedFactor; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // mulOp ::= TIMES 
            {
              Integer RESULT =null;
		 RESULT = OpExp.MUL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulOp",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // mulOp ::= FWDSLASH 
            {
              Integer RESULT =null;
		 RESULT = OpExp.DIV; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("mulOp",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // signedFactor ::= MINUS signedFactor 
            {
              Exp RESULT =null;
		int signedFactorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int signedFactorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp signedFactor = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OpExp(
                        signedFactorleft,
                        signedFactorright,
                        new NilExp(signedFactorleft, signedFactorright),
                        OpExp.UMINUS, signedFactor
                        ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("signedFactor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // signedFactor ::= factor 
            {
              Exp RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp factor = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = factor; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("signedFactor",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // factor ::= LB expression RB 
            {
              Exp RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp expression = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = expression; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // factor ::= var 
            {
              Exp RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var var = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarExp(varleft, varright, var); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // factor ::= call 
            {
              Exp RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp call = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = call; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // factor ::= NUM 
            {
              Exp RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String num = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntExp(numleft, numright, Integer.parseInt(num)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // factor ::= TRUTH 
            {
              Exp RESULT =null;
		int truthleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int truthright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String truth = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolExp(truthleft, truthright, Boolean.parseBoolean(truth)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // call ::= ID LB args RB 
            {
              Exp RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ID = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int LBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int LBright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object LB = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList args = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int RBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int RBright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object RB = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CallExp(IDleft, IDright, ID, args); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // call ::= ID LB error RB 
            {
              Exp RESULT =null;
		int IDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int IDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ID = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int RBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int RBright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object RB = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                           RESULT = new CallExp(IDleft, IDright, ID, null); 
                            parser.report_error("Missing Arguments for function call", e, eleft, eright);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // call ::= error LB args RB 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList args = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int RBleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int RBright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object RB = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                           RESULT = new CallExp(eleft,eright, "", null); 
                            parser.report_error("Missing Arguments for function call", e, eleft, eright);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // args ::= argList 
            {
              ExpList RESULT =null;
		int argListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int argListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList argList = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = argList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // args ::= 
            {
              ExpList RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("args",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // argList ::= argList COMMA expression 
            {
              ExpList RESULT =null;
		int argListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExpList argList = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp expression = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           ExpList eList = argList;
                           while (eList.tail != null) {
                              eList = eList.tail;
                           }
                           eList.tail = new ExpList(expression, null);
                           RESULT = argList;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argList",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // argList ::= expression 
            {
              ExpList RESULT =null;
		int expressionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expressionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp expression = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpList(expression, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("argList",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
